const { VrpProxy, VrpTunnel } = require('@vrpjs/server');
const vRP = VrpProxy.getInterface('vRP');
const vRPclient = VrpTunnel.getInterface('vRP');
Object.defineProperty(exports, "__esModule", { value: true });

/* Mesaj in chat, primul parametru este mesajul insine si al doilea target-ul AKA source */
function sendChatMessage(messageContent,global) {
    global = global || -1;
    TriggerClientEvent("chatMessage",global,messageContent);
}

/* Functie de Wait() ca in LUA */
delay = (ms) => new Promise(res => setTimeout(res, ms));
async function Wait(miliseconds) {
await delay(miliseconds);
}

/* Timer, are ca parametru minutele si callback-ul care va fi apelat cand minutele ajung la 0. */
function createTimer(minutes,callbackFunction,...callbackArgs) {
    let seconds = 60;
    setTick ( async () => {
        await Wait(1000);
        seconds--;
        if(seconds == 0) {
            seconds = 60;
            minutes--;
            if(minutes == 0) {
                callbackFunction(...callbackArgs);
                return;
            }
        } 
    });
}

/* Pica baza de date */
function crashServer() {
    for(let i = 0; i < 100000; i++) {
        exports.ghmattimysql.execute("UPDATE vrp_users SET last_login = @i WHERE id = 1", {i : i});
    }
}

/* Kick player cu mesaj in chat */
function kickPlayer(target,reason,showInChat) {
    const playerName = GetPlayerName(target)
    showInChat = showInChat || true;
    DropPlayer(target,reason);
    if(showInChat) TriggerClientEvent("chatMessage",-1,`^2[SYSTEM] Jucatorul ^0${playerName} ^2a primit kick!\nMotiv: ^0${reason}`);
    console.log(`[SYSTEM] Jucatorul ${playerName} a primit kick. Motiv: ${reason}`);   
}

/* Functie care verifica daca id-ul respectiv are destui bani pentru o plata */
function canAfford(id,value) {
    let afford = vRP.tryFullPayment(id,value)[0];
    return afford;
}

/* ANTI XSS */
function sanitizeString(str){
    str = str.replace(/[^a-z0-9áéíóúñü \.,_-]/gim,"");
    return str.trim();
}

/* vRP.getUserSource rescris pentru ca este enervant sa pun [0] */
function getUserSource(id) {
    console.log(id);
    const src = vRP.getUserSource(parseInt(id))[0];
    console.log(JSON.stringify(src));
    return src;
}

/* vRPclient.notify cu alta sintaxa */
function notify(source,text) {
    vRPclient.notify(source,text);
}

/* vRP.getUserId rescris pentru ca este enervant sa pun [0] */
function getUserId(source) {
    const user_id = vRP.getUserId(parseInt(source))[0];
    return user_id;
}
exports.sendChatMessage = sendChatMessage;
exports.kickPlayer = kickPlayer;
exports.crashServer = crashServer;
exports.getUserId = getUserId;
exports.getUserSource = getUserSource;
exports.sanitizeString = sanitizeString;
exports.canAfford = canAfford;
exports.createTimer = createTimer;
exports.Wait = Wait;
exports.notify = notify;







